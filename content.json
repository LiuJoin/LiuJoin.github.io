{"meta":{"title":"夏慕穆","subtitle":null,"description":null,"author":"沐沐","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Python博客园作业","slug":"博客园作业","date":"2018-07-26T13:09:48.277Z","updated":"2018-07-26T13:15:45.100Z","comments":true,"path":"2018/07/26/博客园作业/","link":"","permalink":"http://yoursite.com/2018/07/26/博客园作业/","excerpt":"123456789101112131415# 启动程序，首页面应该显示成如下格式：# 欢迎来到博客园首页# 1:请登录# 2:请注册# 3:文章页面# 4:日记页面# 5:评论页面# 6:收藏页面# 7:注销# 8:退出程序# 2)，用户输入选项，3~6选项必须在用户登录成功之后，才能访问成功。# 3)，用户选择登录，用户名密码从字典中读取验证，三次机会，没成功则结束整个程 序运行，成功之后，可以选择访问3~6项，访问页面之前，必须要在打印信息， 格式为--&gt;用户:xx 在xx年xx月xx日 执行了 %s操作，访问页面时，页面内容为：欢 迎xx用户访问评论（文章，日记，收藏）页面# 4)，如果用户没有注册，则可以选择注册，注册成功之后，可以自动完成登录（完成自动登录+5分），然后进入首页选择。# 5)，注销用户是指注销用户的登录状态，使其在访问任何页面时，必须重新登录。# 6)，退出程序为结束整个程序运行。","text":"123456789101112131415# 启动程序，首页面应该显示成如下格式：# 欢迎来到博客园首页# 1:请登录# 2:请注册# 3:文章页面# 4:日记页面# 5:评论页面# 6:收藏页面# 7:注销# 8:退出程序# 2)，用户输入选项，3~6选项必须在用户登录成功之后，才能访问成功。# 3)，用户选择登录，用户名密码从字典中读取验证，三次机会，没成功则结束整个程 序运行，成功之后，可以选择访问3~6项，访问页面之前，必须要在打印信息， 格式为--&gt;用户:xx 在xx年xx月xx日 执行了 %s操作，访问页面时，页面内容为：欢 迎xx用户访问评论（文章，日记，收藏）页面# 4)，如果用户没有注册，则可以选择注册，注册成功之后，可以自动完成登录（完成自动登录+5分），然后进入首页选择。# 5)，注销用户是指注销用户的登录状态，使其在访问任何页面时，必须重新登录。# 6)，退出程序为结束整个程序运行。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103# 首页def shouYe(): for i,j in enumerate(xuanZe,1): if i not in range(3,8): print(i,j)# 注册def zhuCe(user): uname=input('请输入用户名：') pwd=input('请输入密码：') if uname!='': user.append(&#123;'uname':uname,'pwd':pwd&#125;) print('注册成功！') b=uname print('用户&#123;&#125;登录成功'.format(uname)) return user,b else: print('用户名不能为空')# 登录def login(user): if b=='未登录': n=1 while n&lt;4: unames=input('请输入用户名：') pwds=input('请输入密码：') if unames!='' and pwds!='': ku=&#123;'uname':unames,'pwd':pwds&#125; if ku in user: print('用户&#123;&#125;登录成功'.format(unames)) a=0 return unames break elif n&lt;3: print('用户名或密码错误，还有%d次重新输入机会'%(3-n)) else: print('账户已锁定') n+=1 else: print('用户&#123;&#125;已登录，请先注销再登录'.format(b))# 注销def zhuXiao(): print('已注销') flags=False# 访问页面def fangWen(c): print('用户%s 在%d年%d月%d日 执行了访问%s的操作'%(b,datetime.datetime.now().year,datetime.datetime.now().month,datetime.datetime.now().day,xuanZe[int(c)-1])) print('欢迎%s访问收藏页面'.center(35,'*')%(b))# 退出def tuiChu(): print('已退出博客园') flag=False # 对页面操作def caoZuo(): if b!='未登录': for i,j in enumerate(xuanZe,1): if i&gt;2: print(i,j) flag=True while flag: c=input('输入操作序号：') if c=='3': fangWen(c) elif c=='4': fangWen(c) elif c=='5': fangWen(c) elif c=='6': fangWen(c) elif c=='7': zhuXiao() shouYe() elif c=='8': print('已退出博客园') exit() else: print('输入序号不存在，请重新输入') else: print('请重新登录')# 开始import datetimeprint('欢迎来到博客园首页'.center(49,'*'))print('请先注册')b='未登录'print(b)xuanZe=['请登录','请注册','文章页面','日记页面','评论页面','收藏页面','注销','退出程序']user=[]flag=Truewhile flag: shouYe() a=input('请输入操作序号：') if a=='1': b=login(user) caoZuo() break elif a=='2': user,b=zhuCe(user) caoZuo() elif a =='8': print('已退出博客园') flag=False elif a in range(3,8): print('请先登录！！登录后即可访问') else: print('输入序号有误请重新输入！')","categories":[],"tags":[{"name":"Python基础","slug":"Python基础","permalink":"http://yoursite.com/tags/Python基础/"}]},{"title":"Python函数嵌套，闭包","slug":"Python函数","date":"2018-07-26T08:40:29.006Z","updated":"2018-07-26T11:27:31.283Z","comments":true,"path":"2018/07/26/Python函数/","link":"","permalink":"http://yoursite.com/2018/07/26/Python函数/","excerpt":"函数嵌套123456789101112def max2(x,y): m = x if x &gt; y else y # 三元运算 return mprint(max2(2,5))def max4(a,b,c,d): res1 = max2(a,b) #在定义的函数max4()中嵌套了之前定义的函数max2() res2 = max2(res1,c) res3 = max2(res2,d) print(res1) print(res2) print(res3)max4(4,10,15,2)","text":"函数嵌套123456789101112def max2(x,y): m = x if x &gt; y else y # 三元运算 return mprint(max2(2,5))def max4(a,b,c,d): res1 = max2(a,b) #在定义的函数max4()中嵌套了之前定义的函数max2() res2 = max2(res1,c) res3 = max2(res2,d) print(res1) print(res2) print(res3)max4(4,10,15,2) 函数名的本质（是函数的内存地址）引用12345def func(): print('in func')f = funcprint(f) # 没有调用func()，所以函数没有执行，只会打印函数名指向的内存地址f() # 加上(),说明调用了func()函数，会执行该函数 容器类元素使用12345678def f1(): print('f1')def f2(): print('f2')def f3(): print('f3')li = [f1,f2,f3]di = &#123;'f1':f1,'f2':f2,'f3':f3&#125; 调用12345678910li[0]() # 函数名加上()就是执行函数di['f2']()``` ## 作为参数和返回值``` bashdef f1(): print('666')def f2(x): x()f2(f1) # 把实参f1传给f2中的形参x，执行x(),相当于f1(),调用了f1 ##闭包 # 某个内部函数被当做对象返回时，里面带了这个内部函数的变量。闭包函数 # 闭包函数调用时，一直都是一个闭包函数 def func(): name = 'jack' def inner(): print(name) return inner f = func()","categories":[],"tags":[{"name":"Python基础","slug":"Python基础","permalink":"http://yoursite.com/tags/Python基础/"}]},{"title":"Python数学和列表操作","slug":"Python数学和列表操作","date":"2018-07-21T07:11:35.111Z","updated":"2018-07-26T11:27:28.349Z","comments":true,"path":"2018/07/21/Python数学和列表操作/","link":"","permalink":"http://yoursite.com/2018/07/21/Python数学和列表操作/","excerpt":"数学模块math导入模块：import math数学模块分为三个模块：数学函数，随机数函数，三角函数 math 数学函数1234567891011121314151617181920212223import mathimport random#数学函数import math#获取绝对值print(abs(-10))#向上取整print(math.ceil(2.8))#向下取整print(math.floor(2.4))#求和print(sum(&#123;1,2,3&#125;))#生成序列print(sum(range(5)))#获取e的x次幂print(math.exp(3))#获取绝对值的浮点数print(math.fabs(5))#将浮点数，分为整数和小数部分，小数部分是一个完整的小数print(math.modf(6.855))#对浮点数进行四舍五入，保留小数点后几位print(round(6.855,2))","text":"数学模块math导入模块：import math数学模块分为三个模块：数学函数，随机数函数，三角函数 math 数学函数1234567891011121314151617181920212223import mathimport random#数学函数import math#获取绝对值print(abs(-10))#向上取整print(math.ceil(2.8))#向下取整print(math.floor(2.4))#求和print(sum(&#123;1,2,3&#125;))#生成序列print(sum(range(5)))#获取e的x次幂print(math.exp(3))#获取绝对值的浮点数print(math.fabs(5))#将浮点数，分为整数和小数部分，小数部分是一个完整的小数print(math.modf(6.855))#对浮点数进行四舍五入，保留小数点后几位print(round(6.855,2)) math数学常量1234#获取常量πprint(math.pi)#获取常量eprint(math.e) 1234567891011#使用del删除元素，删除多个时，中间用逗号隔开，在列表中删除一个元素之后，会重新将内容的下标排序var1=1var2=2del var2,var1print(var1)#删除列表中的前两个元素lists=['a','b','c']print(lists)del lists[0],lists[0]print(lists) math随机数函数1234567891011121314151617181920212223242526272829303132333435363738#3.6之前的版本获取所有内置变量和函数名需要import，3.6.5中不需要引入# import builtinsprint(dir(__builtins__))#random()获取0-1之间的随机数，包含0，不包含1ran=math.floor(random.random()*11)#*floor(max-min+1)+min#choice随机获取列表中的一个元素ran1=random.choice(range(10))ran1=['胡辣汤','豆腐脑','油条','煎饼果子','鸡蛋饼']print(random.choice(ran1))#将序列中的所有元素随机排序，获取固定下标的值，类似于choice，随机获取random.shuffle(ran1)print(ran1[0])#获取指定范围内的随机整数，间隔值默认为1，可以定义起始值；如果只写一个参数表示从0开始到指定数值，不包含数值本身print(random.randrange(100,1000,2))#随机返回一个整数，包含开始值和结束值print(random.randint(5,7))#随机生成下一个实数（小数），它在[x,y]范围内，包含边界值print(random.uniform(1,10))#原型打印内容str1='hello wworld'print(str1) #hello wworldprint(repr(str1)) #'hello wworld'#把字符串当做py代码执行print(eval(repr(str1)))#locals表示当前环境中的所有变量，如果在函数中，只能获取函数中的变量def one(): a='123' b='456' print(locals())one()","categories":[],"tags":[{"name":"Python基础","slug":"Python基础","permalink":"http://yoursite.com/tags/Python基础/"}]},{"title":"Python元组，字典和集合相关操作","slug":"Python元组，字典和集合相关操作","date":"2018-07-20T12:46:36.777Z","updated":"2018-07-26T11:27:25.106Z","comments":true,"path":"2018/07/20/Python元组，字典和集合相关操作/","link":"","permalink":"http://yoursite.com/2018/07/20/Python元组，字典和集合相关操作/","excerpt":"python元组操作和列表相似，运算符和len（），max（），min（）等运算都适用于元组，而那些能改变元素的操作都不能直接操作元组创建单个元素的元组 tuple1=(‘小花花’)， tuple1=’小花花’，基本格式 格式：变量=(i for i in 元组) 结果：不是元组而是一个生成器带有条件的推导式 格式：变量=(i for i in 元组 if 条件表达式)多个循环的推导式（可带有条件） 格式：变量=(x+y for x in 元组1 for y in 元组2 [if 条件表达式]) x+y可以是其他操作","text":"python元组操作和列表相似，运算符和len（），max（），min（）等运算都适用于元组，而那些能改变元素的操作都不能直接操作元组创建单个元素的元组 tuple1=(‘小花花’)， tuple1=’小花花’，基本格式 格式：变量=(i for i in 元组) 结果：不是元组而是一个生成器带有条件的推导式 格式：变量=(i for i in 元组 if 条件表达式)多个循环的推导式（可带有条件） 格式：变量=(x+y for x in 元组1 for y in 元组2 [if 条件表达式]) x+y可以是其他操作 字典操作字典是一种集合，不是序列。可以看成是由键值对构成的组合。在搜索字典时，首先查找键，当查找到键后就可以直接获取该键对应的值，效率很高创建字典：创建空字典 变量={} 变量=dict()创建单个元素的字典 变量={‘键’,’值’}创建多个元素的字典 变量={键:值,键:值…..} 变量=dict({键:值,键:值…..}) 变量=dict({键=值,键值…..}) 变量=dict([(键,值),(键,值)……]) for in 遍历 for i in dict1： print(i) 键 print(dict1[i]) 值 dect1={'zs':'张三','ls':'李四','ww':'王五','sl':'孙六'} result={key:value for key,value in dect1.items()} print(result) 字典内置函数 dic={'name':'张三',5:'男','heigh':'180'} print(dic) print(str(dic)) print(len(dic)) print(type(dic)) 集合操作集合是无序组合，集合是可变的，可以添加或移除数据，但是没有索引位置的概念（没有下标）。集合中任何元素都没有重复，还可以通过集合去除重复。set和dict类似，是一组key的集合，但不存储value，且在set中没有重复的key集合中可以存放的类型：整型，浮点型，复数，布尔值，字符串，元组，冰冻集合集合序列操作的函数有：Len()获取集合长度 max()获取集合最大值 min()获取集合最小值 set() 创建集合集合的遍历普通集合遍历 for 变量 in 集合: 使用变量多集集合遍历 集合={(值,值…),(值,值…),(值,值…)} for 变量1,变量2 in 集合: 使用变量1和变量2集合专用函数add()添加元素pop()随机删除一个元素remove(val)删除集合中的某个元素，返回值Nonediscard(key)删除元素，不同的是，如果删除的元素不在集合中，remove会报错，discard不会报错，返回值Noneclear()删除集合的所有元素（使它成为空集）copy()返回一个新集合，它是集合s的浅拷贝 典型的数学集合运算交集-intersection &gt;&gt;&gt; s1 = set([1, 2, 3]) &gt;&gt;&gt; s2 = set([2, 3, 4]) &gt;&gt;&gt; s1.intersection(s2) {2, 3} &gt;&gt;&gt; s1 &amp; s2 {2, 3} 并集-union &gt;&gt;&gt; s1.union(s2) {1, 2, 3, 4} &gt;&gt;&gt; s1 | s2 {1, 2, 3, 4} 差集-difference &gt;&gt;&gt; s1.difference(s2) {1} &gt;&gt;&gt; s2.difference(s1) {4} &gt;&gt;&gt; s1-s2 {1} &gt;&gt;&gt; s2-s1 {4} 对称差-symmetric_difference &gt;&gt;&gt; s1.symmetric_difference(s2) {1, 4} &gt;&gt;&gt; s2.symmetric_difference(s1) {1, 4} 子集和超集 &gt;&gt;&gt; sSet=set([1,2,3]) &gt;&gt;&gt; bSet=set([1,2,3,4,5,6]) &gt;&gt;&gt; sSet.issubset(bSet) True &gt;&gt;&gt; bSet.issubset(sSet) False &gt;&gt;&gt; sSet.issuperset(bSet) False &gt;&gt;&gt; bSet.issuperset(sSet) True &gt;&gt;&gt; sSet.issubset(sSet) True &gt;&gt;&gt; sSet.issuperset(sSet) True 冰冻集合-frozenset冰冻集合 冰冻集合又称为固定集合，只要创建成功，就不能进行修改创建空的冰冻集合 fset=frozenset()","categories":[],"tags":[{"name":"Python基础","slug":"Python基础","permalink":"http://yoursite.com/tags/Python基础/"}]},{"title":"Python基础5——字符串操作","slug":"Python_05","date":"2018-07-17T07:58:29.049Z","updated":"2018-07-16T09:22:57.024Z","comments":true,"path":"2018/07/17/Python_05/","link":"","permalink":"http://yoursite.com/2018/07/17/Python_05/","excerpt":"","text":"##字符串函数查看字符串的所有函数12str = ''print(dir(str)) 字符串大小写转换1234567891011str = \"asda a34ad fdFsdf AAAsd\"#将字符串的第一个字母变成大写,其他字母变小写print(str.capitalize()) #Asda a34 ad fdfsdf aaasd#所有单词都是以大写开始，其余字母均为小写print(str.title()) #Asda A34 Ad Fdfsdf Aaasd#将字符串中的小写字母转为大写字母print(str.upper()) #ASDA A34 AD FDFSDF AAASD#字符串中所有大写字符为小写print(str.lower()) #asda a34 ad fdfsdf aaasd#对字符串的大小写字母进行转换print(str.swapcase()) #ASDA A34 AD FDfSDF aaaSD 字符串内容查找12345678910111213str = \"asda a34ad fdFsdf AAAsd\"#计算字符串长度print(len(str)) #24#计算指定字符串出现的次数print(str.count('a', 0, 6)) #3#查找指定字符串第一次出现的位置，找不到返回-1print(str.find('sd', 0, 9)) #1#跟find()方法一样，只不过如果str不在 string中会报一个异常（str找不到）print(str.index('sd', 0, 9)) #1#检测字符串是否以指定的字符串开头print(str.startswith('as')) #True#检测字符串是否以指定的字符串结尾print(str.endswith('sb')) #False 字符串内容检测","categories":[],"tags":[]},{"title":"Python基础4——高级特性","slug":"Python_04","date":"2018-07-17T07:58:29.048Z","updated":"2018-07-16T06:22:24.028Z","comments":true,"path":"2018/07/17/Python_04/","link":"","permalink":"http://yoursite.com/2018/07/17/Python_04/","excerpt":"","text":"列表生成式Python 的内置函数range() 函数可创建一个整数序列，一般和 for 循环连用语法格式： range(start,end[,step])。start：起始下标（可选）。默认为0，例如range(5)等价于range(0，5)等价于[0,1,2,3,4]。end：终止下标。例如range(0,5)等价于[0,1,2,3,4]，注意不包括终止下标5。step：步长（可选）。默认为11234567#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]print(list(range(1, 11)))#[1×1, 2×2, 3×3,…, 10×10]list1 = []for i in range(1,11): list1.append(i*i)print(list1) 利用列表生成式可以用一行语句代替循环生成上面的list[代码段 for 变量 in 对象 代码]12print([i for i in range(1,11)])print([i*i for i in range(1,11)]) 两层循环的列表生成式12print([m + n for m in 'ABC' for n in 'XYZ'])#['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ'] 内置函数range()可以生成一个有规律的数字序列，我们可以通过列表表达式很方便的生成一个列表（可以是数字列表，字符串列表等）。Python最大的优势和特点就在于它的简洁性，能用最短的代码实现更多的功能。 切片Python提供切片（Slice）操作符来截取指定索引范围的序列（列表/元组），可以很方便地获取序列的子序列。 L[a:b]表示从索引a开始取，直到索引b为止，但不包括索引b。 支持倒数切片。L[-1]取倒数第一个元素。 切片可用于：str、list、tuple，set。12345list1 = [1, 2, 3, 4, 5, 6, 7, 8]print(list1[::-1]) #[8, 7, 6, 5, 4, 3, 2, 1]print(list1[1:5]) #[2, 3, 4, 5] print(list1[:]) #[1, 2, 3, 4, 5, 6, 7, 8]print(list1[::2]) #[1, 3, 5, 7] 迭代器迭代器—判断一个对象是否可迭代Python迭代器（Iterator）可以记住遍历的位置的对象，从第一个元素开始访问，然后依次访问直到所有的元素都被遍历。迭代器只能往前不会后退，有两个基本方法：iter()和next()。iter()用来创建迭代器，next()用来访问迭代器的下一个元素。字符串、列表或元组对象都能用来创建迭代器，同时也支持for循环遍历。对于一个对象，通常是通过collections模块的Iterable类型判断该对象是否是一个可迭代的对象，如：1234567from collections import Iterableprint(isinstance('abc', Iterable)) # str是否可迭代#Trueprint(isinstance([1,2,3], Iterable)) # list是否可迭代#Trueprint(isinstance(123, Iterable)) # 整数是否可迭代#False 迭代器—列表实现下标循环enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。123456list1 = [1, 2, 3]for i, j in enumerate(list1): print(i, j)#0 1#1 2#2 3 生成器生成器（generator）：生成器是一次生成一个值的特殊类型函数当列表元素很多，而列表后续元素可以通过某种算法推导出来，我们就不用存储完整的列表，从而节省大量的空间。生成器可以利用for循环访问，也可以利用next()来一次访问元素。创建生成器的两种方法： 把一个列表生成式的[]改成() 在函数代码中添加yield关键字1234567891011121314151617a = (i for i in range(5))print(next(a)) #0print(next(a)) #1#斐波那契额数列def fib(max): n, a, b = 0, 0, 1 while n &lt; max: yield b a, b = b, a + b n = n + 1 return donef = fib(5)print(next(f)) #1print(next(f)) #1print(next(f)) #2print(next(f)) #3print(next(f)) #5","categories":[],"tags":[]},{"title":"Python基础3——控制语句","slug":"Python_03","date":"2018-07-17T07:58:29.046Z","updated":"2018-07-16T06:22:25.828Z","comments":true,"path":"2018/07/17/Python_03/","link":"","permalink":"http://yoursite.com/2018/07/17/Python_03/","excerpt":"","text":"条件控制if语句格式： if(表达式)： 语句序列功能：如果条件表达式的值为真，则执行后面的语句序列 if-else语句格式： if(表达式): 语句序列1 else: 语句序列2功能：如果“条件表达式”的判断结果为真，则执行语句序列1；否则，执行语句序列2。 if…elif…else语句if/elif语句是if语句的扩展版本，它包含多个条件，用于作出复杂的判断。格式：if &lt;条件判断1&gt;: &lt;执行1&gt;elif &lt;条件判断2&gt;: &lt;执行2&gt;….else: &lt;执行3&gt; while循环格式： while 表达式： 语句while循环-格式2：while 条件表达式: 语句序列else: 代码段while循环中的else是在while条件表达式为假的情况下才执行的代码内容else可有可无，不写是可以直接输出print(‘内容’)来代替 for循环格式：for 变量名 in 集合： 语句 for循环语句格式：for 变量 in 集合: … 格式2：for 变量1，变量2 in 集合: … 格式3：for 变量 in 集合: …else： …for循环通常与range()函数一起使用，range()函数返回一个列表，for循环遍历列表中的元素。 range()函数range([start,] end[, step])函数从start开始， end结束， step为步长start默认为0， step默认为1功能：生成列表 特殊控制语句break语句作用：跳出for和while循环（只能跳出它最近的那一层循环） continue语句作用：跳过当前循环中的剩余语句，然后继续下一次循环 pass语句作用：没有任何意义的空语句，如果在书写语言结构时不需要任何操作，那么为了避免语法错误，可以使用pass语句占位 作业123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182#输出今天是星期几import datetimea = datetime.datetime.now().weekday()print(a)if a == 0: print(\"今天是星期一\")elif a == 1: print(\"今天是星期二\")elif a == 2: print(\"今天是星期三\")elif a == 3: print(\"今天是星期四\")elif a == 4: print(\"今天是星期五\")elif a == 5: print(\"今天是星期六\")elif a == 6: print(\"今天是星期日\")else: print(\"日期错误\")#金字塔#使用whileh = int(input(\"请输入行数：\"))c = 1while c &lt;= h: i = 1 while i &lt;= h-c: print(\" \", end = \"\") i += 1 j = 1 while j &lt;= 2*c-1: print(\"金\", end = \"\") j += 1 print(\"\") c += 1#使用forh = int(input(\"请输入行数：\"))for c in range(1, h+1): for i in range(1, h-c+1): print(\" \",end = \"\") for j in range(1,2*c): print(\"金\", end = \"\") print(\"\")#最简洁n = int(input(\"输入金字塔的高度：\"))for i in range(1,n+1): print(' '*(n-(i-1)) + '*'*(2*i-1))#九九乘法表for i in range(1,10): for j in range(1,i+1): print(\"%d * %d = %d\" % (j, i, i*j), end = \" \") print(\"\\n\")#使用循环写出实心，空心星星隔行换色h = int(input(\"请输入行数：\"))l = int(input(\"请输入列数：\"))hang = 1lie = 1while hang &lt;= h: if hang%2 == 0: while lie &lt;= l: print(\"★\", end = \"\") lie += 1 else: while lie &lt;= l: print(\"☆\", end = \"\") lie += 1 hang += 1 lie = 1 print(\"\")#公鸡每只5块钱，母鸡每只3块钱，小鸡3只一块钱 ，用百钱买得百鸡，问公鸡,母鸡,小鸡各多少只？for xj in range(3,100,3): for gj in range(1,100): if (gj*5 + (100-xj-gj)*3 + xj/3 == 100) and (100-xj-gj &gt;= 0): print(\"公鸡%d只，母鸡%d只，小鸡%d只\" % (gj, 100-gj-xj, xj))list1 = [1, 2, 5, 7, 3, 8, 4, 9, 6] list1.sort() #升序print(list1)list1.reverse() #降序(先升序sort再倒叙reverse)print(list1)#使用循环#升序for i in range(len(list1)): for j in range(i+1, len(list1)): if list1[i] &gt; list1[j]: list1[i], list1[j] = list1[j], list1[i]print(list1)#降序for i in range(len(list1)): for j in range(i+1, len(list1)): if list1[i] &lt; list1[j]: list1[i], list1[j] = list1[j], list1[i]print(list1)#求1 X 2 X 3 X 4 X ... X 19 X 20的结果?cj = 1for i in range(1, 21): cj *= iprint(cj)#打印1-100的数，并求1-100之和，奇数之和，偶数之和。#总和sum = 0print(\"总和为：\")for i in range(1, 101): sum += i if i &lt;100: print(i, end = \"+\") else: print(i, end = \"=\")print(sum)#奇数和sumj = 0print(\"奇数之和为：\")for i in range(1, 101, 2): sumj += i if i &lt;99: print(i, end = \"+\") else: print(i, end = \"=\")print(sumj)#偶数和sumo = 0print(\"偶数之和为：\")for i in range(2, 101,2): sumo += i if i &lt;100: print(i, end = \"+\") else: print(i, end = \"=\")print(sumo)#随机产生20个[10 , 100]的正整数，输出这些数#补充：append()，将一个值追加到列表中import randomlist1 = [] for i in range(0,20): #a = random.randint(10,100) a = random.randrange(10,100) print(a, end = \" \") list1.append(a)print(\"\") print(list1)#编程将所有“水仙花数”打印出来，并打印其总个数。 “水仙花数”是一个 各个位立方之和等于该整数的三位数。for num in range(100,1000): gw = num % 10 sw = (num // 10) % 10 bw = num // 100 if num == (gw**3 + sw**3 + bw**3): print(\"%d是水仙花数\" % num)for i in range(100,1000): str1 = str(i) sum = 0 for j in str1: sum += j**3 if sum == i: print(\"%d是水仙花数\" % i)#已知abc + cba = 1333，求a,b,cfor a in range(1, 10): for b in range(0, 10): for c in range(1, 10): if a*100+b*10+c+c*100+b*10+a == 1333: print((\"a=%d, b=%d, c=%d:\") % (a, b, c))#输入一个数，判断这个数是否是质数num = int(input(\"请输入一个整数:\"))if num &gt; 1: for i in range(2, num): if num%i == 0: print(\"%d不是质数\" % num) break else: print(\"%d是质数\" % num)else: print(\"请重新输入\")","categories":[],"tags":[]},{"title":"Python基础2——运算和运算符","slug":"Python_02","date":"2018-07-17T07:58:29.045Z","updated":"2018-07-16T06:22:27.500Z","comments":true,"path":"2018/07/17/Python_02/","link":"","permalink":"http://yoursite.com/2018/07/17/Python_02/","excerpt":"","text":"运算符算术运算符&#43; &#45; &#42; &#47; %（取模） **（求幂） //（取整) 比较运算符== != &lt;&gt; &gt; &lt; &gt;= &lt;= 赋值运算符= += -= *= /= %= **= //= 位运算符&amp;(按位与运算符) |(按位或运算符) ^(按位异或运算符)~(按位取反运算符) &lt;&lt;(左移动运算符) &gt;&gt;(右移动运算符) 逻辑与 and逻辑与运算表达式：表达式1 and 表达式2【有一个为假就为假】 逻辑或 or逻辑或运算表达式：表达式1 or 表达式2【有一个为真就为真】 逻辑非： not逻辑非运算表达式： not 表达式 成员运算符in：如果在指定的序列中找到值返回True，否则返回Falsenot in：如果在指定的序列中没有找到值返回True，否则返回False 身份运算符is：判断两个标识符是不是引用同一个对象is not：判断两个标识符是不是引用不同一个对象 获取变量类型 type（）isinstance() 函数来判断一个对象是否是一个已知的类型语法：isinstance(object, classinfo) 判断object是否是classinfo类型，是的话返回True，否的话返回False object – 实例对象。 classinfo – 可以是直接或间接类名、基本类型或者由它们组成的元组1234567list1=['hello',100,45,78,10,['one','two']]for i in list1: if isinstance(i,int): if i%2==0: print('%d是一个偶数'%i) else: print('%d是一个奇数'%i) 导入库库：封装一些功能math：数学相关的库random: 随机数import mathimport random1234567891011121314151617181920212223#向上取整print(math.ceil(18.1)) #19print(math.ceil(18.9)) #19#向下取整print(math.floor(18.1)) #18print(math.floor(18.9)) #18#随机生成【0，1）之间的数（浮点数）print(random.random())#从0-99选取一个随机数print(random.randrange(100))#19-180的随机数import randomprint(random.randrange(19,180))#输出1-10的和sum = 0for i in range(1,11): sum += i if i == 10: print(\"10 = \",end = \"\") break print(i, end = \" + \")print(sum)# 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55","categories":[],"tags":[]},{"title":"Python基础1——数据类型","slug":"Python_01","date":"2018-07-17T07:58:29.044Z","updated":"2018-07-16T06:22:01.171Z","comments":true,"path":"2018/07/17/Python_01/","link":"","permalink":"http://yoursite.com/2018/07/17/Python_01/","excerpt":"","text":"Python文件的创建文件名称部分： 1、可以使用英文，不要使用中文 2、可以使用数字，但是不要使用全数字 3、可以使用_或者-等分隔文件名 4、文件名要有意义方便维护文件后缀部分： 常用后缀名为.py或.pyc python文件的注释注释就是注解，解释，主要用于在代码中进行代码相关的文字提示或者程序调试功能单行注释 内容前加’#’多行注释 ‘’’ 多行注释 ‘’’ “”” 多行注释 “”” 变量变量名称=值： Python 中的变量赋值不需要类型声明 每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。 每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。 等号（=）用来给变量赋值多个变量赋值：12a = b = c = 1a, b, c = 1, 2, \"john\" 变量的命名规则： 不能用数字开头 小写字母，后面可以跟数字 单词和单词之间用隔开（模块名，包名） 单词首字母大写（类名） 以开头，其他和普通变量一样（实例变量） 标识符和关键词不能作为变量名使用 关键字获取关键字：1234import keywordprint(keyword.kwlist)['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] Python的数据类型Python可以自定义数据类型，所以Python有无数种数据类型Python提供6个标准数据类型（Object） Nuber 数值类型 String 字符类型 List 列表类型 Tuple 元组类型 Dict 字典类型 Set 集合类型 进制转换二进制、八进制、十六进制转换为十进制123456二进制转十进制print(0b11101)八进制转十进制print(0o5642)十六进制转十进制print(0x7e) 十进制转换为二进制、八进制、十六进制12345678十进制转二进制print(bin(9582))十进制转八进制print(oct(9582))十进制转十六进制print(hex(9582))用字符串格式表达式转换成八进制、十六进制的字符串str1 = \"%d %o %X\"%(64, 64, 255) 字符串字符串的定义字符串是 Python 中最常用的数据类型。我们可以使用引号(‘或”)来创建字符串，创建字符串很简单，只要为变量分配一个值即可Python中的字符串可以如下表示： 单引号（’）：可以用单引号指示字符串，就如同’Quote me on this‘这样。所有的空白，即空格和制表符都照原样保留。 双引号（“）：测试数据显示在双引号中的字符串与单引号中的字符串的使用完全相同。 三引号（’’’)：不需要行属转义，它们已经包含在字符串中。 转义字符在需要在字符中使用特殊字符时，python用反斜杠()转义字符，转义符号是右斜杠（反斜杠）不加\\的转义字符只是一个普通的字母，加上\\之后代表特殊含义 列表List（列表）用 [ ] 标识， 是 Python 中使用最频繁的数据类型。 格式：变量=[值1,值2,值3….]列表(list)操作1234567891011121314151617181920212223创建一个空列表list1 = []print(list1)创建带有元素的列表list2 = [1, 2, 3, 4, 5]列表中的元素数据可以是不同类型的list3 = [1, 2, \"hello\", \"world\", True]list1 = ('zhangsan', 'lisi', 'wanger')输出列表内容print(list1)输出列表中的两个元素print(list1[1]+list1[0])输出list1的类型print(type(list1))列表截取print(list1[1:])重复输出某个元素print(list1[2]*4)删除某个坐标的元素list = [1, 2, 3, 4]list.pop(2)print(list) 元组元组（tuple）是另一个数据类型，类似于List（列表）。元组用”()”标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表 格式：变量=（值1,值2,值3….）元组(tuple)操作12345678910定义元组tuple1 = (1, 2, 3, 4, 5)输出元组print(tuple1)输出元组中的某个元素print(tuple1[1])查看tuple1的类型print(type(tuple1))删除元组del.tuple1 元组里的值无法修改 字典字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。 格式：变量={‘键1’:’值1’,’键2’:’值2’,’键3’:’值3’….}字典(dict)操作1234567891011121314定义字典dict1 = &#123;\"name\":\"张三\", \"age\":\"18\", \"class\":\"python\" &#125;输出字典print(dict1)输出某个键所对应的值print(dict1[\"name\"])删除dict1.pop(\"age\")创建字典的几种方法d1=dict(&#123;\"id\":19,\"name\":\"Marry\",\"city\":\"chongqing\"&#125;)d2=dict(id=19,name=\"Marry\",city=\"chongqing\")d3=dict([(\"id\",19),(\"nmae\",\"Marry\"),(\"city\",\"chongqing\")])d4=dict(zip((\"id\",\"name\",\"city\"),(19,\"Marry\",\"chongqing\")))d5=&#123;\"id\":19,\"name\":\"Marry\",\"city\":\"chongqing\"&#125; 集合集合（set）是一个无序不重复元素的序列，可以使用{}也可以使用set 格式：变量={值，值，值…..}集合中可以获取所有数据，但是不能通过下标获取集合无序，输出时顺序交换不重复的集合，自动去重复的功能集合和字典都是无序存储，所以无法通过下标获取里面的内容。集合(set)操作12345678定义集合set1=&#123;'苹果','oppo','华为','小米','oppo','华为','小米'&#125;输出集合print(set1)查看类型print(type(set1))删除set1.remove(”苹果”) 数据类型转换自动转换 向更加精确的类型转换 运算的时候、做判断强制转换 人为干预 复数12345print(complex(5,5)) #(5+5j)print(complex(5)) #(5+0j)print(complex(0)) #0jprint(complex(True)) #(1+0j)print(complex(False)) #0j 布尔值布尔值：Ture和False转为整数，True自动转为1，False转为0转为浮点数，True自动转为1.0，False转为0.0转为False的情况有：整形 0浮点型 0.0复数 0+0j布尔值 false字符串 ‘’空字符串列表 []空列表元组 ()空元组 (0)字典 {}空字典集合 set()空集合转为False的情况是有限的，除了False的情况，其他都为True 字符串型-强制转换str(x)将对象 x 转换为字符串repr(x)将对象 x 转换为表达式字符串(原样输出) 字符串、列表、元组、字典、集合-强制转换转换具体操作1234567891011121314151617181920212223242526272829303132333435363738#字典转换为集合set1 = set(dict1)print(set1)print(type(set1))#字典转换为元组tuple1 = tuple(dict1)print(tuple1)print(type(tuple1))#将字典转换为字符串str1 = str(dict1)print(str1)print(type(str1))#元组转换为字典tuple1 = (['uname','张三'],['age',45],['class','python'])dict1 = dict(tuple1)print(dict1)print(type(dict1))#列表转换为字典list1 = [['uname','张三'],['age',45],['class','python']]dict1 = dict(list1)print(dict1)print(type(dict1))#将列表转为集合list1 = [\"uname\", \"age\", \"class\"]set1 = set(list1)print(set1)print(type(set))#将列表转换为字符串list1 = [\"uname\", \"age\", \"class\"]str1 = str(list1)print(str1)print(type(str1)) 作业123456789101112131415161718192021222324252627#1、从当前列表中a = list((1,2,3,4,5,6,7,8,9,10,11,12,13,14)) 获取9-12的值a = list((1,2,3,4,5,6,7,8,9,10,11,12,13,14))print(a[8:12])#2、选择适当的格式存储学生的相关信息:姓名，年龄，性别，专业，院校，联系方式，籍贯等内容dictXinxi = &#123;\"姓名\":\"王\", \"年龄\":\"22\", \"性别\":\"男\", \"专业\":\"软件工程\", \"院校\":\"黄河科技学院\", \"联系方式\":\"13283716683\"&#125;print(dictXinxi)print(dictXinxi[\"姓名\"])# 3、以下哪个命名不合法# MyGod5(合法)、_MyGod_(不合法)、MyGod(合法)、5MyGod(不合法)#扩展：参考手册，查找相关函数，能不能生成指定的数字for i in range(5,8): #输出5，6，7 print(i)#描述两个变量值的关系：num1 = 123456num2 = num1print(num1)print(id(num1))print(num2)print(id(num2))#num1和num2数值相同，地址也相同#简答：python总为什么使用缩进呢？#缩进是用来界定代码块的，相当于其他编程语言里的大括号","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-07-17T07:58:29.042Z","updated":"2018-07-21T08:00:56.520Z","comments":true,"path":"2018/07/17/hello-world/","link":"","permalink":"http://yoursite.com/2018/07/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}